Here are the project instructions:

-----------------
PRE-REQUISITE
-----------------
You'll need an instance of Neo4J installed/running 
(you can download it here: https://neo4j.com/download/ 
or use a sandbox instance: https://neo4j.com/sandbox-v2/) 

-------------------------
FUNCTIONAL REQUIREMENTS
-------------------------
The task is to develop a simple API that would process input data, 
communicate with Neo4J and return the results to the client.

The API - REST or GraphQL will support 2 operations:
1. Create an :Employee node
	This operation will take 2 params - a String and an int. 
	The String value will populate the name property of the new :Employee node, 
	the int value will populate the emp_id value. 
	*Don't worry about data validation etc.

2. Return all :Employee nodes to the client. Any format is fine.

3. Bonus task 1: 
	develop a simple UI that can be used directly from the web browser to drive the API 
	any stack will do, from plain HTML forms to JQuery to Angular/React/etc.
	use any HTTP or GrapQL client

4. Bonus task 2: 
	deploy your app along with a Neo4J instance to an AWS EC2 instance so that we can 
	see it in action without going through the setup process.


-------------------------
TECHNICAL REQUIREMENTS
-------------------------
For the actual implementation use Java (Spring boot, Dropwizard, Spark java etc) or Javascript (NodeJS + Express). 
For your API - Neo4J communication use a Bolt driver (https://neo4j.com/docs/developer-manual/current/drivers/).
When done, check your code into a github repo along with instructions on how to set up/use the API. 

To demonstrate the API use any HTTP or GrapQL client (see bonus task #1 below) 
Please include instructions on how to use it in the README.md file in the github repo. 

